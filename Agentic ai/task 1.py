# @title üéØ Task 1: Simple Agent with Structured Responses# @markdown Interactive demo of structured AI responsesclass StructuredResponse(BaseModel):    """Structure for consistent LLM responses"""    summary: str    key_points: List[str]    confidence_score: float    category: str    follow_up_questions: List[str]class SimpleAgent:    def __init__(self):        self.conversation_history = []        def get_structured_response(self, user_prompt: str) -> StructuredResponse:        """Get structured response from LLM"""                # Enhanced mock LLM with better simulation        llm_response = self._call_llm_mock(user_prompt)                return llm_response        def _call_llm_mock(self, prompt: str) -> StructuredResponse:        """Enhanced mock LLM call with contextual responses"""                # Contextual responses based on prompt content        prompt_lower = prompt.lower()                if any(word in prompt_lower for word in ['ai', 'artificial intelligence', 'machine learning']):            return StructuredResponse(                summary="Artificial Intelligence refers to computer systems that can perform tasks typically requiring human intelligence, including learning, problem-solving, and pattern recognition.",                key_points=[                    "AI encompasses machine learning, deep learning, and neural networks",                    "Modern AI uses large datasets and advanced algorithms",                    "Applications include natural language processing, computer vision, and robotics",                    "Ethical considerations are crucial in AI development"                ],                confidence_score=0.94,                category="Technology",                follow_up_questions=[                    "What are the different types of machine learning?",                    "How do neural networks work?",                    "What are the ethical concerns with AI?"                ]            )        elif any(word in prompt_lower for word in ['climate', 'environment', 'renewable']):            return StructuredResponse(                summary="Climate change refers to long-term shifts in temperatures and weather patterns, primarily caused by human activities like burning fossil fuels.",                key_points=[                    "Global temperatures are rising due to greenhouse gas emissions",                    "Renewable energy sources can significantly reduce carbon footprint",                    "Climate change affects biodiversity and weather patterns",                    "International cooperation is essential for effective solutions"                ],                confidence_score=0.89,                category="Environment",                follow_up_questions=[                    "What are the most effective renewable energy sources?",                    "How can individuals reduce their carbon footprint?",                    "What are the economic impacts of climate change?"                ]            )        else:            return StructuredResponse(                summary=f"Comprehensive analysis of '{prompt}' covering key aspects and implications.",                key_points=[                    f"Important aspect 1 related to {prompt}",                    f"Critical consideration 2 regarding {prompt}",                    f"Practical application 3 of {prompt}",                    f"Future implications of {prompt} developments"                ],                confidence_score=0.85,                category="General Knowledge",                follow_up_questions=[                    f"Can you provide more details about specific aspects of {prompt}?",                    f"How does {prompt} relate to current technologies?",                    f"What are the challenges in implementing {prompt} solutions?"                ]            )# Interactive Widget for Task 1print("üîß TASK 1: Simple Agent with Structured Responses")print("Try asking about: AI, climate change, machine learning, or any other topic!")task1_query = widgets.Textarea(    value='Explain artificial intelligence and its applications',    placeholder='Enter your question here...',    description='Query:',    layout=widgets.Layout(width='80%', height='80px'))task1_button = widgets.Button(description="Get Structured Response", button_style='success')task1_output = widgets.Output()def on_task1_click(b):    with task1_output:        clear_output()        agent = SimpleAgent()        response = agent.get_structured_response(task1_query.value)                print("üéØ STRUCTURED RESPONSE")        print("=" * 50)        print(f"üìã Summary: {response.summary}")        print(f"üéØ Confidence: {response.confidence_score:.2f}")        print(f"üìÅ Category: {response.category}")        print("\nüîë Key Points:")        for i, point in enumerate(response.key_points, 1):            print(f"   {i}. {point}")        print("\n‚ùì Follow-up Questions:")        for i, question in enumerate(response.follow_up_questions, 1):            print(f"   {i}. {question}")task1_button.on_click(on_task1_click)display(task1_query, task1_button, task1_output)